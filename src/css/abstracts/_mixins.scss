// Importar variáveis
@import 'variables';
/* Mixins - Funções reutilizáveis para SCSS */

// Mixin para media queries
@mixin respond-to($breakpoint) {
    @if $breakpoint == xs {
        @media (max-width: #{$breakpoint-sm - 1}) {
            @content;
        }
    } @else if $breakpoint == sm {
        @media (min-width: #{$breakpoint-sm}) and (max-width: #{$breakpoint-md - 1}) {
            @content;
        }
    } @else if $breakpoint == md {
        @media (min-width: #{$breakpoint-md}) and (max-width: #{$breakpoint-lg - 1}) {
            @content;
        }
    } @else if $breakpoint == lg {
        @media (min-width: #{$breakpoint-lg}) and (max-width: #{$breakpoint-xl - 1}) {
            @content;
        }
    } @else if $breakpoint == xl {
        @media (min-width: #{$breakpoint-xl}) and (max-width: #{$breakpoint-xxl - 1}) {
            @content;
        }
    } @else if $breakpoint == xxl {
        @media (min-width: #{$breakpoint-xxl}) {
            @content;
        }
    } @else if $breakpoint == mobile {
        @media (max-width: #{$breakpoint-md - 1}) {
            @content;
        }
    } @else if $breakpoint == tablet {
        @media (max-width: #{$breakpoint-lg - 1}) {
            @content;
        }
    } @else if $breakpoint == desktop {
        @media (min-width: #{$breakpoint-lg}) {
            @content;
        }
    } @else {
        @error "O breakpoint '#{$breakpoint}' não é válido. Use xs, sm, md, lg, xl, xxl, mobile, tablet ou desktop.";
    }
}

// Mixin para flexbox
@mixin flex(
    $direction: row,
    $justify: flex-start,
    $align: center,
    $wrap: nowrap,
    $gap: 0
) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-wrap: $wrap;
    @if $gap != 0 {
        gap: $gap;
    }
}

// Mixin para posicionamento absoluto
@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// Mixin para posicionamento fixo
@mixin fixed($top: auto, $right: auto, $bottom: auto, $left: auto) {
    position: fixed;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// Mixin para grid
@mixin grid($columns: 1, $rows: auto, $gap: 0) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    grid-template-rows: $rows;
    gap: $gap;
}

// Mixin para truncar texto
@mixin text-truncate($lines: 1) {
    @if $lines == 1 {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    } @else {
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
}

// Mixin para reset de botão
@mixin button-reset {
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;
    outline: none;
}

// Mixin para transições
@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
    transition: $property $duration $timing;
}

// Mixin para glassmorphism
@mixin glass($opacity: 0.2, $blur: 10px) {
    background-color: rgba(255, 255, 255, $opacity);
    backdrop-filter: blur($blur);
    -webkit-backdrop-filter: blur($blur);
}

// Mixin para texto com sombra
@mixin text-shadow($size: 2px) {
    text-shadow: 0 $size 4px rgba(0, 0, 0, 0.3);
}

// Mixin para box-shadow
@mixin box-shadow($shadow: $box-shadow) {
    box-shadow: $shadow;
}

// Mixin para animação de hover
@mixin hover-lift($y: -3px, $shadow: $box-shadow-lg) {
    @include transition;

    &:hover,
    &:focus {
        transform: translateY($y);
        @include box-shadow($shadow);
    }
}

// Mixin para gradientes
@mixin gradient($direction, $start-color, $end-color) {
    background: linear-gradient($direction, $start-color, $end-color);
}
