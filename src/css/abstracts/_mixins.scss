// Importar variáveis
@import 'variables';

/* Mixins - Funções reutilizáveis para SCSS */

// Mixin para media queries
@mixin livingstone-media($breakpoint) {
    @if $breakpoint == xs {
        @media (max-width: #{$livingstone-breakpoint-sm - 1}) {
            @content;
        }
    } @else if $breakpoint == sm {
        @media (min-width: #{$livingstone-breakpoint-sm}) {
            @content;
        }
    } @else if $breakpoint == md {
        @media (min-width: #{$livingstone-breakpoint-md}) {
            @content;
        }
    } @else if $breakpoint == lg {
        @media (min-width: #{$livingstone-breakpoint-lg}) {
            @content;
        }
    } @else if $breakpoint == xl {
        @media (min-width: #{$livingstone-breakpoint-xl}) {
            @content;
        }
    } @else if $breakpoint == xxl {
        @media (min-width: #{$livingstone-breakpoint-xxl}) {
            @content;
        }
    } @else if $breakpoint == mobile-only {
        @media (max-width: #{$livingstone-breakpoint-md - 1}) {
            @content;
        }
    } @else if $breakpoint == tablet-down {
        @media (max-width: #{$livingstone-breakpoint-lg - 1}) {
            @content;
        }
    } @else {
        @error "O breakpoint '#{$breakpoint}' não é válido.";
    }
}

// Mixin para flexbox
@mixin livingstone-flex(
    $direction: row,
    $justify: flex-start,
    $align: center,
    $wrap: nowrap,
    $gap: 0
) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-wrap: $wrap;
    @if $gap != 0 {
        gap: $gap;
    }
}

// Mixin para posicionamento absoluto
@mixin livingstone-position-absolute(
    $top: auto,
    $right: auto,
    $bottom: auto,
    $left: auto
) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// Mixin para transições
@mixin livingstone-transition($property: all, $duration: 0.3s, $timing: ease) {
    transition: $property $duration $timing;
}

// Mixin para sombras
@mixin livingstone-shadow($level: 'base') {
    @if $level == 'sm' {
        box-shadow: $livingstone-box-shadow-sm;
    } @else if $level == 'base' {
        box-shadow: $livingstone-box-shadow;
    } @else if $level == 'lg' {
        box-shadow: $livingstone-box-shadow-lg;
    } @else {
        @error "Nível de sombra '#{$level}' não válido. Use 'sm', 'base' ou 'lg'.";
    }
}

// Mixin para texto truncado
@mixin livingstone-truncate($lines: 1) {
    @if $lines == 1 {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    } @else {
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
}

// Mixin para reset de botão
@mixin livingstone-button-reset {
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;
    outline: none;
}

// Mixin para glassmorphism
@mixin livingstone-glass($opacity: 0.2, $blur: 10px) {
    background-color: rgba(255, 255, 255, $opacity);
    backdrop-filter: blur($blur);
    -webkit-backdrop-filter: blur($blur);
}

// Mixin para animação de hover
@mixin livingstone-hover-effect($y: -3px, $shadow: $livingstone-box-shadow) {
    @include livingstone-transition;

    &:hover,
    &:focus {
        transform: translateY($y);
        box-shadow: $shadow;
    }
}
